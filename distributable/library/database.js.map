{"version":3,"sources":["../../source/library/database.js"],"names":["EventEmitter","SQLite","Database","constructor","path","mode","OPEN_READWRITE","OPEN_CREATE","_path","_mode","_database","_count","_onTrace","statement","emit","open","Promise","resolve","reject","error","on","__onTrace","console","beginTransaction","run","existsTableMigration","existsTable","createTableMigration","dropTableMigration","existsIndexMigration","existsIndex","createIndexMigration","dropIndexMigration","isMigrationInstalled","name","query","exists","installMigration","uninstallMigration","commitTransaction","rollbackTransaction","parameter","changes","get","row","first","all","close","off"],"mappings":"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","sourcesContent":["import EventEmitter from 'events'\n// import SQLFormat from 'sql-formatter'\nimport SQLite from 'sqlite3'\n\nclass Database extends EventEmitter {\n\n  constructor(path, mode = SQLite.OPEN_READWRITE | SQLite.OPEN_CREATE) {\n    super()\n\n    this._path = path\n    this._mode = mode\n\n    this._database = null\n    this._count = 0\n\n  }\n\n  _onTrace(statement) {\n    this.emit('trace', statement)\n  }\n\n  get path() {\n    return this._path\n  }\n\n  /* c8 ignore next 3 */\n  get mode() {\n    return this._mode\n  }\n\n  open() {\n\n    return new Promise((resolve, reject) => {\n\n      if (this._count === 0) {\n        \n        this._database = new SQLite.Database(this._path, this._mode, (error) => {\n\n          if (error) {\n            reject(error)\n          } else {\n\n            this._database.on('trace', this.__onTrace = (statement) => {\n              // console.log('Database.on(\\'trace\\', this.__onTrace = (statement) => { ... })')\n                \n              try {\n                this._onTrace(statement)\n              /* c8 ignore next 3 */\n              } catch (error) {\n                console.error(error)\n              }\n\n            })\n    \n            resolve(++this._count)\n\n          }\n\n        })\n\n      } else if (this._count > 0) {\n        resolve(++this._count)\n      }\n\n    })\n\n  }\n\n  /* c8 ignore next 3 */\n  beginTransaction() {\n    return this.run('begin transaction')\n  }\n\n  existsTableMigration() {\n    return this.existsTable('migration')\n  }\n\n  createTableMigration() {\n\n    let statement = ' create table migration ( \\\n                        name text not null, \\\n                        installed text not null, \\\n                        uninstalled text, \\\n                        constraint migrationKey primary key ( name ) )'\n\n    return this.run(statement)\n\n  }\n\n  dropTableMigration() {\n    return this.run('drop table migration')\n  }\n\n  existsIndexMigration() {\n    return this.existsIndex('migrationIndex')\n  }\n\n  createIndexMigration() {\n\n    let statement = ' create index migrationIndex on migration ( \\\n                        name, \\\n                        installed, \\\n                        uninstalled )'\n\n    return this.run(statement)\n\n  }\n\n  dropIndexMigration() {\n    return this.run('drop index migrationIndex')\n  }\n\n  // selectAllMigration() {\n\n  //   let query = ' select    migration.name, \\\n  //                           migration.installed, \\\n  //                           migration.uninstalled \\\n  //                 from      migration \\\n  //                 order by  migration.name, \\\n  //                           migration.installed, \\\n  //                           migration.uninstalled'\n\n  //   await this.open()\n  //   return this.all(query)\n\n  // }\n\n  isMigrationInstalled(name) {\n\n    let query = ' select      true \\\n                  from        migration \\\n                  indexed by  migrationIndex \\\n                  where       migration.name = $name and \\\n                              migration.installed is not null and \\\n                              migration.uninstalled is null'\n\n    return this.exists(query, { '$name': name })\n\n  }\n\n  installMigration(name) {\n\n    let statement = ' insert or replace into migration (  name, \\\n                                                          installed, \\\n                                                          uninstalled ) \\\n                      values (  $name, \\\n                                datetime(\\'now\\', \\'localtime\\'), \\\n                                null )'\n\n    return this.run(statement, { '$name': name })\n\n  }\n\n  uninstallMigration(name) {\n\n    let statement = ' update      migration \\\n                      indexed by  migrationIndex \\\n                      set         uninstalled = datetime(\\'now\\', \\'localtime\\') \\\n                      where       name = $name and \\\n                                  installed is not null and \\\n                                  uninstalled is null'\n\n    return this.run(statement, { '$name': name })\n\n  }\n\n  /* c8 ignore next 4 */\n  commitTransaction() {\n    return this.run('commit transaction')\n  }\n\n  /* c8 ignore next 4 */\n  rollbackTransaction() {\n    return this.run('rollback transaction')\n  }\n\n  run(statement, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.run(statement, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(statement))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.run(statement, parameter, function(error) { // Note that this cannot be an arrow function because of the use of this\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve({ 'numberOfChanges': this.changes })\n        }\n\n      })\n\n    })\n\n  }\n\n  get(query, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.get(query, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(query))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.get(query, parameter, (error, row) => {\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve(row)\n        }\n\n      })\n\n    })\n\n  }\n\n  async exists(query, parameter = []) {\n    return (await this.get(query, parameter)) ? true : false\n  }\n\n  existsTable(name) {\n\n    let query = ' select  true \\\n                  from    sqlite_master \\\n                  where   sqlite_master.type = \\'table\\' and \\\n                          sqlite_master.name = $name'\n\n    return this.exists(query, { '$name': name })\n\n  }\n\n  existsIndex(name) {\n\n    let query = ' select  true \\\n                  from    sqlite_master \\\n                  where   sqlite_master.type = \\'index\\' and \\\n                          sqlite_master.name = $name'\n\n    return this.exists(query, { '$name': name })\n\n  }\n\n  first(query, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.first(query, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(query))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.get(query, parameter, (error, row) => {\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve(row)\n        }\n\n      })\n\n    })\n\n  }\n\n  all(query, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.all(query, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(query))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.all(query, parameter, (error, row) => {\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve(row)\n        }\n\n      })\n\n    })\n\n  }\n\n  close() {\n\n    return new Promise((resolve, reject) => {\n\n      if (this._count === 1) {\n\n        this._database.close((error) => {\n\n          if (error) {\n            reject(error)\n          } else {\n\n            this._database.off('trace', this.__onTrace)\n            delete this.__onTrace\n\n            this._database = null\n            resolve(--this._count)\n\n          }\n\n        })\n\n      } else if (this._count > 1) {\n        resolve(--this._count)\n      }\n\n    })\n\n  }\n\n}\n\nexport { Database }\n"],"file":"database.js"}