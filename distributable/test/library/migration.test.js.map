{"version":3,"sources":["../../../source/test/library/migration.test.js"],"names":["FileSystem","Path","Test","Database","Migration","test","databasePath","ensureDir","dirname","migration","getMigration","is","length","name","isInstalled","installMigration","uninstallMigration","only","database","open","explanation","explainIndexMigration","log","detail","close"],"mappings":"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","sourcesContent":["import FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Test from 'ava'\n\nimport { Database } from '../../index.js'\nimport { Migration } from './migration.js'\n\nTest('Migration.getMigration(databasePath)', async (test) => {\n\n  let databasePath = 'process/data/getMigration.db'\n  await FileSystem.ensureDir(Path.dirname(databasePath))\n\n  let migration = await Migration.getMigration(databasePath)\n\n  test.is(migration.length, 3)\n  \n  test.is(migration[0].name, '00000000000010-create-table-migration')\n  test.is(await migration[0].isInstalled(), false)\n  test.is(migration[1].name, '00000000000020-create-index-migration')\n  test.is(await migration[1].isInstalled(), false)\n  test.is(migration[2].name, '20200823213000-null')\n  test.is(await migration[2].isInstalled(), false)\n\n})\n\nTest('Migration.installMigration(databasePath)', async (test) => {\n\n  let databasePath = 'process/data/installMigration.db'\n  await FileSystem.ensureDir(Path.dirname(databasePath))\n\n  await Migration.installMigration(databasePath)\n\n  try {\n    \n    let migration = await Migration.getMigration(databasePath)\n\n    test.is(migration.length, 3)\n\n    test.is(await migration[0].isInstalled(), true)\n    test.is(await migration[1].isInstalled(), true)\n    test.is(await migration[2].isInstalled(), true)\n\n  } finally {\n    await Migration.uninstallMigration(databasePath)\n  }\n\n})\n\nTest('Migration.uninstallMigration(databasePath)', async (test) => {\n\n  let databasePath = 'process/data/uninstallMigration.db'\n  await FileSystem.ensureDir(Path.dirname(databasePath))\n\n  await Migration.installMigration(databasePath)\n  await Migration.uninstallMigration(databasePath)\n\n  let migration = await Migration.getMigration(databasePath)\n\n  test.is(migration.length, 3)\n\n  test.is(await migration[0].isInstalled(), false)\n  test.is(await migration[1].isInstalled(), false)\n  test.is(await migration[2].isInstalled(), false)\n\n})\n\nTest.only('migrationIndex', async (test) => {\n\n  let databasePath = 'process/data/migrationIndex.db'\n  await FileSystem.ensureDir(Path.dirname(databasePath))\n\n  await Migration.installMigration(databasePath)\n\n  try {\n    \n    let database = new Database(databasePath)\n\n    await database.open()\n\n    try {\n\n      let explanation = await database.explainIndexMigration('migrationIndex')\n\n      test.log(explanation[0].detail)\n      test.is(explanation[0].detail, 'SEARCH TABLE migration USING COVERING INDEX migrationIndex (name=?)')\n\n    } finally {\n      await database.close()\n    }\n\n  } finally {\n    await Migration.uninstallMigration(databasePath)\n  }\n\n})\n"],"file":"migration.test.js"}