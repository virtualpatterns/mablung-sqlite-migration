{"version":3,"sources":["../../../source/test/library/database.test.js"],"names":["FileSystem","Path","Test","Database","Migration","test","databasePath","ensureDir","dirname","installMigration","database","open","numberOfChanges","title","is","close","uninstallMigration","detail","isMigrationInstalled","log"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,KAAjB;;AAEA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;;AAEAF,IAAI,CAAC,gEAAD,EAAmE,MAAOG,IAAP,IAAgB;;AAErF,MAAIC,YAAY,GAAG,qBAAnB;AACA,QAAMN,UAAU,CAACO,SAAX,CAAqBN,IAAI,CAACO,OAAL,CAAaF,YAAb,CAArB,CAAN;;AAEA,QAAMF,SAAS,CAACK,gBAAV,CAA2BH,YAA3B,CAAN;;AAEA,MAAI;;AAEF,QAAII,QAAQ,GAAG,IAAIP,QAAJ,CAAaG,YAAb,CAAf;;AAEA,UAAMI,QAAQ,CAACC,IAAT,EAAN;;AAEA,QAAI;;AAEF,UAAI,EAAEC,eAAF,KAAsB,MAAMF,QAAQ,CAACD,gBAAT,CAA0BJ,IAAI,CAACQ,KAA/B,CAAhC;;AAEAR,MAAAA,IAAI,CAACS,EAAL,CAAQF,eAAR,EAAyB,CAAzB;;AAED,KAND,SAMU;AACR,YAAMF,QAAQ,CAACK,KAAT,EAAN;AACD;;AAEF,GAhBD,SAgBU;AACR,UAAMX,SAAS,CAACY,kBAAV,CAA6BV,YAA7B,CAAN;AACD;;AAEF,CA3BG,CAAJ;;AA6BAJ,IAAI,CAAC,gBAAD,EAAmB,MAAOG,IAAP,IAAgB;;AAErC,MAAIC,YAAY,GAAG,gCAAnB;AACA,QAAMN,UAAU,CAACO,SAAX,CAAqBN,IAAI,CAACO,OAAL,CAAaF,YAAb,CAArB,CAAN;;AAEA,QAAMF,SAAS,CAACK,gBAAV,CAA2BH,YAA3B,CAAN;;AAEA,MAAI;;AAEF,QAAII,QAAQ,GAAG,IAAIP,QAAJ,CAAaG,YAAb,CAAf;;AAEA,UAAMI,QAAQ,CAACC,IAAT,EAAN;;AAEA,QAAI;;AAEF,UAAIM,MAAM,GAAG,IAAb;AACC,OAAE,EAAEA,MAAF,EAAF,IAAiB,MAAMP,QAAQ,CAACQ,oBAAT,CAA8Bb,IAAI,CAACQ,KAAnC,EAA0C,IAA1C,CAAvB;;AAEDR,MAAAA,IAAI,CAACc,GAAL,CAASF,MAAT;AACAZ,MAAAA,IAAI,CAACS,EAAL,CAAQG,MAAR,EAAgB,qEAAhB;;AAEC,OAAE,EAAEA,MAAF,EAAF,IAAiB,MAAMP,QAAQ,CAACM,kBAAT,CAA4BX,IAAI,CAACQ,KAAjC,EAAwC,IAAxC,CAAvB;;AAEDR,MAAAA,IAAI,CAACc,GAAL,CAASF,MAAT;AACAZ,MAAAA,IAAI,CAACS,EAAL,CAAQG,MAAR,EAAgB,4DAAhB;;AAED,KAbD,SAaU;AACR,YAAMP,QAAQ,CAACK,KAAT,EAAN;AACD;;AAEF,GAvBD,SAuBU;AACR;AACD;;AAEF,CAlCG,CAAJ","sourcesContent":["import FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Test from 'ava'\n\nimport { Database } from './database.js'\nimport { Migration } from './migration.js'\n\nTest('Database.run(statement, parameter) returns { numberOfChanges }', async (test) => {\n\n  let databasePath = 'process/data/run.db'\n  await FileSystem.ensureDir(Path.dirname(databasePath))\n\n  await Migration.installMigration(databasePath)\n\n  try {\n    \n    let database = new Database(databasePath)\n\n    await database.open()\n\n    try {\n      \n      let { numberOfChanges } = await database.installMigration(test.title)\n\n      test.is(numberOfChanges, 1)\n\n    } finally {\n      await database.close()\n    }\n\n  } finally {\n    await Migration.uninstallMigration(databasePath)\n  }\n\n})\n\nTest('migrationIndex', async (test) => {\n\n  let databasePath = 'process/data/migrationIndex.db'\n  await FileSystem.ensureDir(Path.dirname(databasePath))\n\n  await Migration.installMigration(databasePath)\n\n  try {\n    \n    let database = new Database(databasePath)\n\n    await database.open()\n\n    try {\n    \n      let detail = null\n      ;[ { detail } ] = await database.isMigrationInstalled(test.title, true)\n\n      test.log(detail)\n      test.is(detail, 'SEARCH TABLE migration USING COVERING INDEX migrationIndex (name=?)')\n\n      ;[ { detail } ] = await database.uninstallMigration(test.title, true)\n\n      test.log(detail)\n      test.is(detail, 'SEARCH TABLE migration USING INDEX migrationIndex (name=?)')\n\n    } finally {\n      await database.close()\n    }\n\n  } finally {\n    // await Migration.uninstallMigration(databasePath)\n  }\n\n})\n"],"file":"database.test.js"}