{"version":3,"sources":["../../source/library/database.js"],"names":["EventEmitter","SQLite","Database","constructor","path","mode","OPEN_READWRITE","OPEN_CREATE","_path","_mode","_database","_count","_onTrace","statement","emit","open","Promise","resolve","reject","error","on","__onTrace","console","all","run","existsTableMigration","existsTable","existsIndexMigrationByName","existsIndex","isMigrationInstalled","name","isExplained","query","explain","exists","installMigration","uninstallMigration","parameter","get","beginTransaction","commitTransaction","rollbackTransaction","changes","row","close","off","onOpen","fn"],"mappings":"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","sourcesContent":["import EventEmitter from 'events'\n// import SQLFormat from 'sql-formatter'\nimport SQLite from 'sqlite3'\n\nclass Database extends EventEmitter {\n\n  constructor(path, mode = SQLite.OPEN_READWRITE | SQLite.OPEN_CREATE) {\n    super()\n\n    this._path = path\n    this._mode = mode\n\n    this._database = null\n    this._count = 0\n\n  }\n\n  _onTrace(statement) {\n    this.emit('trace', statement)\n  }\n\n  get path() {\n    return this._path\n  }\n\n  /* c8 ignore next 3 */\n  get mode() {\n    return this._mode\n  }\n\n  async open() {\n\n    await new Promise((resolve, reject) => {\n\n      if (this._count === 0) {\n        \n        this._database = new SQLite.Database(this._path, this._mode, (error) => {\n\n          if (error) {\n            reject(error)\n          } else {\n\n            this._database.on('trace', this.__onTrace = (statement) => {\n              // console.log('Database.on(\\'trace\\', this.__onTrace = (statement) => { ... })')\n                \n              try {\n                this._onTrace(statement)\n              /* c8 ignore next 3 */\n              } catch (error) {\n                console.error(error)\n              }\n\n            })\n    \n            resolve(++this._count)\n\n          }\n\n        })\n\n      } else if (this._count > 0) {\n        resolve(++this._count)\n      }\n\n    })\n    await Promise.all([\n      this.run('pragma foreign_keys = true'),\n      this.run('pragma automatic_index = false')\n    ])\n\n  }\n\n  existsTableMigration() {\n    return this.existsTable('migration')\n  }\n\n  // createTableMigration() {\n\n  //   let statement = ' create table migration ( \\\n  //                       name not null, \\\n  //                       installed not null, \\\n  //                       uninstalled, \\\n  //                       constraint migrationKey primary key ( name ) )'\n\n  //   return this.run(statement)\n\n  // }\n\n  // dropTableMigration() {\n  //   return this.run('drop table migration')\n  // }\n\n  existsIndexMigrationByName() {\n    return this.existsIndex('migrationByNameIndex')\n  }\n\n  // createIndexMigration() {\n\n  //   let statement = ' create index migrationByNameIndex on migration ( \\\n  //                       name, \\\n  //                       installed, \\\n  //                       uninstalled )'\n\n  //   return this.run(statement)\n\n  // }\n\n  // dropIndexMigration() {\n  //   return this.run('drop index migrationByNameIndex')\n  // }\n\n  // selectAllMigration() {\n\n  //   let query = ' select    migration.name, \\\n  //                           migration.installed, \\\n  //                           migration.uninstalled \\\n  //                 from      migration \\\n  //                 order by  migration.name, \\\n  //                           migration.installed, \\\n  //                           migration.uninstalled'\n\n  //   await this.open()\n  //   return this.all(query)\n\n  // }\n\n  async isMigrationInstalled(name, isExplained = false) {\n\n    let query = ' select      true \\\n                  from        migration \\\n                  indexed by  migrationByNameIndex \\\n                  where       migration.name = $name and \\\n                              migration.installed is not null and \\\n                              migration.uninstalled is null'\n\n    return isExplained ? this.explain(query, { '$name': name }) : this.exists(query, { '$name': name })\n\n  }\n\n  async installMigration(name) {\n\n    let statement = ' insert or replace into migration (  name, \\\n                                                          installed, \\\n                                                          uninstalled ) \\\n                      values (  $name, \\\n                                datetime(\\'now\\', \\'localtime\\'), \\\n                                null )'\n\n    return this.run(statement, { '$name': name })\n\n  }\n\n  async uninstallMigration(name, isExplained = false) {\n\n    let statement = ' update      migration \\\n                      indexed by  migrationByNameIndex \\\n                      set         uninstalled = datetime(\\'now\\', \\'localtime\\') \\\n                      where       name = $name and \\\n                                  installed is not null and \\\n                                  uninstalled is null'\n\n    return isExplained ? this.explain(statement, { '$name': name }) : this.run(statement, { '$name': name })\n\n  }\n\n  async existsTable(name) {\n\n    let query = ' select  true \\\n                  from    sqlite_master \\\n                  where   sqlite_master.type = \\'table\\' and \\\n                          sqlite_master.name = $name'\n\n    return this.exists(query, { '$name': name })\n\n  }\n\n  async existsIndex(name) {\n\n    let query = ' select  true \\\n                  from    sqlite_master \\\n                  where   sqlite_master.type = \\'index\\' and \\\n                          sqlite_master.name = $name'\n\n    return this.exists(query, { '$name': name })\n\n  }\n\n  async exists(query, parameter = []) {\n    return (await this.get(query, parameter)) ? true : false\n  }\n  \n  /* c8 ignore next 3 */\n  async beginTransaction() {\n    return this.run('begin transaction')\n  }\n\n  /* c8 ignore next 4 */\n  async commitTransaction() {\n    return this.run('commit transaction')\n  }\n\n  /* c8 ignore next 4 */\n  async rollbackTransaction() {\n    return this.run('rollback transaction')\n  }\n\n  async run(statement, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.run(statement, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(statement))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.run(statement, parameter, function(error) { // Note that this cannot be an arrow function because of the use of this\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve({ 'numberOfChanges': this.changes })\n        }\n\n      })\n\n    })\n\n  }\n\n  async get(query, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.get(query, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(query))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.get(query, parameter, (error, row) => {\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve(row)\n        }\n\n      })\n\n    })\n\n  }\n\n  async all(query, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.all(query, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(query))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.all(query, parameter, (error, row) => {\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve(row)\n        }\n\n      })\n\n    })\n\n  }\n\n  async explain(statement, parameter = []) {\n    // console.log('-'.repeat(80))\n    // console.log('Database.explain(statement, parameter)')\n    // console.log('-'.repeat(80))\n    // console.log()\n    // console.log(SQLFormat.format(statement))\n    // console.log()\n\n    return new Promise((resolve, reject) => {\n\n      this._database.all(`explain query plan \\n${statement}`, parameter, (error, row) => {\n\n        if (error) {\n          reject(error)\n        } else {\n          resolve(row)\n        }\n\n      })\n\n    })\n\n  }\n\n  async close() {\n\n    await new Promise((resolve, reject) => {\n\n      if (this._count === 1) {\n\n        this._database.close((error) => {\n\n          if (error) {\n            reject(error)\n          } else {\n\n            this._database.off('trace', this.__onTrace)\n            delete this.__onTrace\n\n            this._database = null\n            resolve(--this._count)\n\n          }\n\n        })\n\n      } else if (this._count > 1) {\n        resolve(--this._count)\n      }\n\n    })\n\n  }\n\n  async onOpen(fn) {\n\n    await this.open()\n\n    try {\n      return await fn(this)\n    } finally {\n      await this.close()\n    }\n\n  }\n}\n\nexport { Database }\n"],"file":"database.js"}